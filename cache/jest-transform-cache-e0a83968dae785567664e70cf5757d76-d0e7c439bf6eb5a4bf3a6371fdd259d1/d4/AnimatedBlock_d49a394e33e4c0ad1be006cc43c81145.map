{"version":3,"sources":["AnimatedBlock.js"],"names":["AnimatedBlock","array","type","block","map","n","__nodeID","_array","result","forEach","node","AnimatedNode","createAnimatedBlock","items","adapt","nodify","v","__isProxy","__val","InternalAnimatedValue","valueForConstant","Array","isArray"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;IAEMA,a;;;AAGJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,mHAAM;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,KAAK,EAAEF,KAAK,CAACG,GAAN,CAAU,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,QAAN;AAAA,OAAX;AAAxB,KAAN,EAA4DL,KAA5D;AACA,UAAKM,MAAL,GAAcN,KAAd;AAFiB;AAGlB;;;;mCAEc;AACb,UAAIO,MAAJ;;AACA,WAAKD,MAAL,CAAYE,OAAZ,CAAoB,UAAAC,IAAI,EAAI;AAC1BF,QAAAA,MAAM,GAAG,cAAIE,IAAJ,CAAT;AACD,OAFD;;AAGA,aAAOF,MAAP;AACD;;;EAdyBG,sB;;AAiBrB,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,SAAOC,KAAK,CAACD,KAAD,CAAZ;AACD;;AAED,SAASE,MAAT,CAAgBC,CAAhB,EAAmB;AACjB,MAAI,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,CAACC,SAA/B,EAA0C;AACxC,QAAI,CAACD,CAAC,CAACE,KAAP,EAAc;AACZF,MAAAA,CAAC,CAACE,KAAF,GAAU,IAAIC,8BAAJ,CAA0B,CAA1B,CAAV;AACD;;AACD,WAAOH,CAAC,CAACE,KAAT;AACD;;AAED,SAAOF,CAAC,YAAYL,sBAAb,GACHK,CADG,GAEHG,+BAAsBC,gBAAtB,CAAuCJ,CAAvC,CAFJ;AAGD;;AAEM,SAASF,KAAT,CAAeE,CAAf,EAAkB;AACvB,SAAOK,KAAK,CAACC,OAAN,CAAcN,CAAd,IACH,IAAIhB,aAAJ,CAAkBgB,CAAC,CAACZ,GAAF,CAAM,UAAAM,IAAI;AAAA,WAAII,KAAK,CAACJ,IAAD,CAAT;AAAA,GAAV,CAAlB,CADG,GAEHK,MAAM,CAACC,CAAD,CAFV;AAGD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport InternalAnimatedValue from './InternalAnimatedValue';\n\nclass AnimatedBlock extends AnimatedNode {\n  _array;\n\n  constructor(array) {\n    super({ type: 'block', block: array.map(n => n.__nodeID) }, array);\n    this._array = array;\n  }\n\n  __onEvaluate() {\n    let result;\n    this._array.forEach(node => {\n      result = val(node);\n    });\n    return result;\n  }\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n    return v.__val;\n  }\n  // TODO: cache some typical static values (e.g. 0, 1, -1)\n  return v instanceof AnimatedNode\n    ? v\n    : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v)\n    ? new AnimatedBlock(v.map(node => adapt(node)))\n    : nodify(v);\n}\n"]}