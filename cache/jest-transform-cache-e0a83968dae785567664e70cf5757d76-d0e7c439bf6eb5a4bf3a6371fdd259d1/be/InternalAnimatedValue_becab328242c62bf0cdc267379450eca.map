{"version":3,"sources":["InternalAnimatedValue.js"],"names":["sanitizeValue","value","undefined","Number","CONSTANT_VALUES","Map","initializeConstantValues","size","forEach","v","set","InternalAnimatedValue","number","get","constant","type","_startingValue","_value","_animation","_constant","ReanimatedModule","getValue","__nodeID","val","__nodeConfig","__getValue","__detachAnimation","animation","__detach","__inputNodes","length","__forceUpdateCache","AnimatedNode"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,SAAOA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAA5B,IAAyC,OAAOD,KAAP,KAAiB,QAA1D,GACHA,KADG,GAEHE,MAAM,CAACF,KAAD,CAFV;AAGD;;AAED,IAAMG,eAAe,GAAG,IAAIC,GAAJ,EAAxB;;AAEA,SAASC,wBAAT,GAAoC;AAClC,MAAIF,eAAe,CAACG,IAAhB,IAAwB,CAA5B,EAA+B;AAC7B;AACD;;AACD,GAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,EAAW,CAAC,CAAZ,EAAe,CAAf,EAAkBC,OAAlB,CAA0B,UAAAC,CAAC;AAAA,WACzBL,eAAe,CAACM,GAAhB,CAAoBD,CAApB,EAAuB,IAAIE,qBAAJ,CAA0BF,CAA1B,EAA6B,IAA7B,CAAvB,CADyB;AAAA,GAA3B;AAGD;;IAMoBE,qB;;;;qCACKC,M,EAAQ;AAC9BN,MAAAA,wBAAwB;AACxB,aACEF,eAAe,CAACS,GAAhB,CAAoBD,MAApB,KAA+B,IAAID,qBAAJ,CAA0BC,MAA1B,EAAkC,IAAlC,CADjC;AAGD;;;AAED,iCAAYX,KAAZ,EAAqC;AAAA;;AAAA,QAAlBa,QAAkB,uEAAP,KAAO;AAAA;AACnC,2HAAM;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBd,MAAAA,KAAK,EAAED,aAAa,CAACC,KAAD;AAArC,KAAN;AACA,UAAKe,cAAL,GAAsB,MAAKC,MAAL,GAAchB,KAApC;AACA,UAAKiB,UAAL,GAAkB,IAAlB;AACA,UAAKC,SAAL,GAAiBL,QAAjB;AAJmC;AAKpC;;;;+BAEU;AAAA;;AACT,UAAI,CAAC,KAAKK,SAAV,EAAqB;AACnB,YAAIC,0BAAiBC,QAArB,EAA+B;AAC7BD,oCAAiBC,QAAjB,CACE,KAAKC,QADP,EAEE,UAAAC,GAAG;AAAA,mBAAK,MAAI,CAACC,YAAL,CAAkBvB,KAAlB,GAA0BsB,GAA/B;AAAA,WAFL;AAID,SALD,MAKO;AACL,eAAKC,YAAL,CAAkBvB,KAAlB,GAA0B,KAAKwB,UAAL,EAA1B;AACD;AACF;;AACD,WAAKC,iBAAL,CAAuB,KAAKR,UAA5B;;AACA;AACD;;;sCAEiBS,S,EAAW;AAC3BA,MAAAA,SAAS,IAAIA,SAAS,CAACC,QAAV,EAAb;;AACA,UAAI,KAAKV,UAAL,KAAoBS,SAAxB,EAAmC;AACjC,aAAKT,UAAL,GAAkB,IAAlB;AACD;AACF;;;sCAEiBS,S,EAAW;AAC3B,WAAKD,iBAAL,CAAuB,KAAKR,UAA5B;;AACA,WAAKA,UAAL,GAAkBS,SAAlB;AACD;;;mCAEc;AACb,UAAI,KAAKE,YAAL,IAAqB,KAAKA,YAAL,CAAkBC,MAA3C,EAAmD;AACjD,aAAKD,YAAL,CAAkBrB,OAAlB,CAA0Be,QAA1B;AACD;;AACD,aAAO,KAAKN,MAAZ;AACD;;;iCAEYhB,K,EAAO;AAClB,WAAKgB,MAAL,GAAchB,KAAd;;AACA,WAAK8B,kBAAL,CAAwB9B,KAAxB;AACD;;;EApDgD+B,sB","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport ReanimatedModule from '../ReanimatedModule';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string'\n    ? value\n    : Number(value);\n}\n\nconst CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size != 0) {\n    return;\n  }\n  [0, -1, 1, -2, 2].forEach(v =>\n    CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true))\n  );\n}\n\n/**\n * This class has been made internal in order to omit dependencies' cycles which\n * were caused by imperative setValue and interpolate â€“ they are currently exposed with AnimatedValue.js\n */\nexport default class InternalAnimatedValue extends AnimatedNode {\n  static valueForConstant(number) {\n    initializeConstantValues();\n    return (\n      CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true)\n    );\n  }\n\n  constructor(value, constant = false) {\n    super({ type: 'value', value: sanitizeValue(value) });\n    this._startingValue = this._value = value;\n    this._animation = null;\n    this._constant = constant;\n  }\n\n  __detach() {\n    if (!this._constant) {\n      if (ReanimatedModule.getValue) {\n        ReanimatedModule.getValue(\n          this.__nodeID,\n          val => (this.__nodeConfig.value = val)\n        );\n      } else {\n        this.__nodeConfig.value = this.__getValue();\n      }\n    }\n    this.__detachAnimation(this._animation);\n    super.__detach();\n  }\n\n  __detachAnimation(animation) {\n    animation && animation.__detach();\n    if (this._animation === animation) {\n      this._animation = null;\n    }\n  }\n\n  __attachAnimation(animation) {\n    this.__detachAnimation(this._animation);\n    this._animation = animation;\n  }\n\n  __onEvaluate() {\n    if (this.__inputNodes && this.__inputNodes.length) {\n      this.__inputNodes.forEach(val);\n    }\n    return this._value;\n  }\n\n  _updateValue(value) {\n    this._value = value;\n    this.__forceUpdateCache(value);\n  }\n}\n"]}