{"version":3,"sources":["AnimatedCall.js"],"names":["NODE_MAPPING","Map","listener","data","node","get","id","_callback","args","AnimatedCall","jsFunction","type","input","map","n","__nodeID","_args","set","size","ReanimatedEventEmitter","addListener","delete","removeAllListeners","val","AnimatedNode","createAnimatedCall","func"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,YAAY,GAAG,IAAIC,GAAJ,EAArB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAMC,IAAI,GAAGJ,YAAY,CAACK,GAAb,CAAiBF,IAAI,CAACG,EAAtB,CAAb;AACAF,EAAAA,IAAI,IAAIA,IAAI,CAACG,SAAL,CAAeJ,IAAI,CAACK,IAApB,CAAR;AACD;;IAEKC,Y;;;AAIJ,wBAAYD,IAAZ,EAAkBE,UAAlB,EAA8B;AAAA;;AAAA;AAC5B,kHAAM;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAEJ,IAAI,CAACK,GAAL,CAAS,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,QAAN;AAAA,OAAV;AAAvB,KAAN,EAA0DP,IAA1D;AACA,UAAKD,SAAL,GAAiBG,UAAjB;AACA,UAAKM,KAAL,GAAaR,IAAb;AAH4B;AAI7B;;;;+BAEU;AACT;AACAR,MAAAA,YAAY,CAACiB,GAAb,CAAiB,KAAKF,QAAtB,EAAgC,IAAhC;;AACA,UAAIf,YAAY,CAACkB,IAAb,KAAsB,CAA1B,EAA6B;AAC3BC,wCAAuBC,WAAvB,CAAmC,kBAAnC,EAAuDlB,QAAvD;AACD;AACF;;;+BAEU;AACTF,MAAAA,YAAY,CAACqB,MAAb,CAAoB,KAAKN,QAAzB;;AACA,UAAIf,YAAY,CAACkB,IAAb,KAAsB,CAA1B,EAA6B;AAC3BC,wCAAuBG,kBAAvB,CAA0C,kBAA1C;AACD;;AACD;AACD;;;mCAEc;AACb,WAAKf,SAAL,CAAe,KAAKS,KAAL,CAAWH,GAAX,CAAeU,QAAf,CAAf;;AACA,aAAO,CAAP;AACD;;;EA7BwBC,sB;;AAgCpB,SAASC,kBAAT,CAA4BjB,IAA5B,EAAkCkB,IAAlC,EAAwC;AAC7C,SAAO,IAAIjB,YAAJ,CAAiBD,IAAjB,EAAuBkB,IAAvB,CAAP;AACD","sourcesContent":["import ReanimatedEventEmitter from '../ReanimatedEventEmitter';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const node = NODE_MAPPING.get(data.id);\n  node && node._callback(data.args);\n}\n\nclass AnimatedCall extends AnimatedNode {\n  _callback;\n  _args;\n\n  constructor(args, jsFunction) {\n    super({ type: 'call', input: args.map(n => n.__nodeID) }, args);\n    this._callback = jsFunction;\n    this._args = args;\n  }\n\n  __attach() {\n    super.__attach();\n    NODE_MAPPING.set(this.__nodeID, this);\n    if (NODE_MAPPING.size === 1) {\n      ReanimatedEventEmitter.addListener('onReanimatedCall', listener);\n    }\n  }\n\n  __detach() {\n    NODE_MAPPING.delete(this.__nodeID);\n    if (NODE_MAPPING.size === 0) {\n      ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');\n    }\n    super.__detach();\n  }\n\n  __onEvaluate() {\n    this._callback(this._args.map(val));\n    return 0;\n  }\n}\n\nexport function createAnimatedCall(args, func) {\n  return new AnimatedCall(args, func);\n}\n"]}