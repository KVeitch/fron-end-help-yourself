{"version":3,"sources":["AnimatedOperator.js"],"names":["reduce","fn","input","a","b","reduceFrom","initialValue","infix","single","OPERATIONS","add","sub","multiply","divide","pow","Math","modulo","sqrt","log","sin","cos","tan","acos","asin","atan","exp","round","and","or","not","defined","undefined","isNaN","lessThan","eq","greaterThan","lessOrEq","greaterOrEq","neq","AnimatedOperator","operator","type","op","map","n","__nodeID","_op","_input","_operation","AnimatedNode","createAnimatedOperator","name","args","adapt"],"mappings":"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","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\n\nfunction reduce(fn) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)));\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\n\nfunction infix(fn) {\n  return input => fn(val(input[0]), val(input[1]));\n}\n\nfunction single(fn) {\n  return input => fn(val(input[0]));\n}\n\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => ((a % b) + b) % b),\n  sqrt: single(a => Math.sqrt(a)),\n  log: single(a => Math.log(a)),\n  sin: single(a => Math.sin(a)),\n  cos: single(a => Math.cos(a)),\n  tan: single(a => Math.tan(a)),\n  acos: single(a => Math.acos(a)),\n  asin: single(a => Math.asin(a)),\n  atan: single(a => Math.atan(a)),\n  exp: single(a => Math.exp(a)),\n  round: single(a => Math.round(a)),\n\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single(a => !a),\n  defined: single(a => a !== null && a !== undefined && !isNaN(a)),\n\n  // comparing\n  lessThan: infix((a, b) => a < b),\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b),\n};\n\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n\n  constructor(operator, input) {\n    super(\n      { type: 'op', op: operator, input: input.map(n => n.__nodeID) },\n      input\n    );\n    this._op = operator;\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n    return this._operation(this._input);\n  }\n}\n\nexport function createAnimatedOperator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n"]}