750358fb27a895267f0b4c839c583bb8
var SetCache = require("./_SetCache"),
    arraySome = require("./_arraySome"),
    cacheHas = require("./_cacheHas");

var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }

  var stacked = stack.get(array);

  if (stacked && stack.get(other)) {
    return stacked == other;
  }

  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
  stack.set(array, other);
  stack.set(other, array);

  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }

    if (compared !== undefined) {
      if (compared) {
        continue;
      }

      result = false;
      break;
    }

    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }

  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9lcXVhbEFycmF5cy5qcyJdLCJuYW1lcyI6WyJTZXRDYWNoZSIsInJlcXVpcmUiLCJhcnJheVNvbWUiLCJjYWNoZUhhcyIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImVxdWFsQXJyYXlzIiwiYXJyYXkiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiZXF1YWxGdW5jIiwic3RhY2siLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJsZW5ndGgiLCJvdGhMZW5ndGgiLCJzdGFja2VkIiwiZ2V0IiwiaW5kZXgiLCJyZXN1bHQiLCJzZWVuIiwidW5kZWZpbmVkIiwic2V0IiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLGVBQXRCO0FBQUEsSUFDSUMsU0FBUyxHQUFHRCxPQUFPLGdCQUR2QjtBQUFBLElBRUlFLFFBQVEsR0FBR0YsT0FBTyxlQUZ0Qjs7QUFLQSxJQUFJRyxvQkFBb0IsR0FBRyxDQUEzQjtBQUFBLElBQ0lDLHNCQUFzQixHQUFHLENBRDdCOztBQWdCQSxTQUFTQyxXQUFULENBQXFCQyxLQUFyQixFQUE0QkMsS0FBNUIsRUFBbUNDLE9BQW5DLEVBQTRDQyxVQUE1QyxFQUF3REMsU0FBeEQsRUFBbUVDLEtBQW5FLEVBQTBFO0FBQ3hFLE1BQUlDLFNBQVMsR0FBR0osT0FBTyxHQUFHTCxvQkFBMUI7QUFBQSxNQUNJVSxTQUFTLEdBQUdQLEtBQUssQ0FBQ1EsTUFEdEI7QUFBQSxNQUVJQyxTQUFTLEdBQUdSLEtBQUssQ0FBQ08sTUFGdEI7O0FBSUEsTUFBSUQsU0FBUyxJQUFJRSxTQUFiLElBQTBCLEVBQUVILFNBQVMsSUFBSUcsU0FBUyxHQUFHRixTQUEzQixDQUE5QixFQUFxRTtBQUNuRSxXQUFPLEtBQVA7QUFDRDs7QUFFRCxNQUFJRyxPQUFPLEdBQUdMLEtBQUssQ0FBQ00sR0FBTixDQUFVWCxLQUFWLENBQWQ7O0FBQ0EsTUFBSVUsT0FBTyxJQUFJTCxLQUFLLENBQUNNLEdBQU4sQ0FBVVYsS0FBVixDQUFmLEVBQWlDO0FBQy9CLFdBQU9TLE9BQU8sSUFBSVQsS0FBbEI7QUFDRDs7QUFDRCxNQUFJVyxLQUFLLEdBQUcsQ0FBQyxDQUFiO0FBQUEsTUFDSUMsTUFBTSxHQUFHLElBRGI7QUFBQSxNQUVJQyxJQUFJLEdBQUlaLE9BQU8sR0FBR0osc0JBQVgsR0FBcUMsSUFBSUwsUUFBSixFQUFyQyxHQUFvRHNCLFNBRi9EO0FBSUFWLEVBQUFBLEtBQUssQ0FBQ1csR0FBTixDQUFVaEIsS0FBVixFQUFpQkMsS0FBakI7QUFDQUksRUFBQUEsS0FBSyxDQUFDVyxHQUFOLENBQVVmLEtBQVYsRUFBaUJELEtBQWpCOztBQUdBLFNBQU8sRUFBRVksS0FBRixHQUFVTCxTQUFqQixFQUE0QjtBQUMxQixRQUFJVSxRQUFRLEdBQUdqQixLQUFLLENBQUNZLEtBQUQsQ0FBcEI7QUFBQSxRQUNJTSxRQUFRLEdBQUdqQixLQUFLLENBQUNXLEtBQUQsQ0FEcEI7O0FBR0EsUUFBSVQsVUFBSixFQUFnQjtBQUNkLFVBQUlnQixRQUFRLEdBQUdiLFNBQVMsR0FDcEJILFVBQVUsQ0FBQ2UsUUFBRCxFQUFXRCxRQUFYLEVBQXFCTCxLQUFyQixFQUE0QlgsS0FBNUIsRUFBbUNELEtBQW5DLEVBQTBDSyxLQUExQyxDQURVLEdBRXBCRixVQUFVLENBQUNjLFFBQUQsRUFBV0MsUUFBWCxFQUFxQk4sS0FBckIsRUFBNEJaLEtBQTVCLEVBQW1DQyxLQUFuQyxFQUEwQ0ksS0FBMUMsQ0FGZDtBQUdEOztBQUNELFFBQUljLFFBQVEsS0FBS0osU0FBakIsRUFBNEI7QUFDMUIsVUFBSUksUUFBSixFQUFjO0FBQ1o7QUFDRDs7QUFDRE4sTUFBQUEsTUFBTSxHQUFHLEtBQVQ7QUFDQTtBQUNEOztBQUVELFFBQUlDLElBQUosRUFBVTtBQUNSLFVBQUksQ0FBQ25CLFNBQVMsQ0FBQ00sS0FBRCxFQUFRLFVBQVNpQixRQUFULEVBQW1CRSxRQUFuQixFQUE2QjtBQUM3QyxZQUFJLENBQUN4QixRQUFRLENBQUNrQixJQUFELEVBQU9NLFFBQVAsQ0FBVCxLQUNDSCxRQUFRLEtBQUtDLFFBQWIsSUFBeUJkLFNBQVMsQ0FBQ2EsUUFBRCxFQUFXQyxRQUFYLEVBQXFCaEIsT0FBckIsRUFBOEJDLFVBQTlCLEVBQTBDRSxLQUExQyxDQURuQyxDQUFKLEVBQzBGO0FBQ3hGLGlCQUFPUyxJQUFJLENBQUNPLElBQUwsQ0FBVUQsUUFBVixDQUFQO0FBQ0Q7QUFDRixPQUxTLENBQWQsRUFLUTtBQUNOUCxRQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNBO0FBQ0Q7QUFDRixLQVZELE1BVU8sSUFBSSxFQUNMSSxRQUFRLEtBQUtDLFFBQWIsSUFDRWQsU0FBUyxDQUFDYSxRQUFELEVBQVdDLFFBQVgsRUFBcUJoQixPQUFyQixFQUE4QkMsVUFBOUIsRUFBMENFLEtBQTFDLENBRk4sQ0FBSixFQUdBO0FBQ0xRLE1BQUFBLE1BQU0sR0FBRyxLQUFUO0FBQ0E7QUFDRDtBQUNGOztBQUNEUixFQUFBQSxLQUFLLENBQUMsUUFBRCxDQUFMLENBQWdCTCxLQUFoQjtBQUNBSyxFQUFBQSxLQUFLLENBQUMsUUFBRCxDQUFMLENBQWdCSixLQUFoQjtBQUNBLFNBQU9ZLE1BQVA7QUFDRDs7QUFFRFMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIsV0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU2V0Q2FjaGUgPSByZXF1aXJlKCcuL19TZXRDYWNoZScpLFxuICAgIGFycmF5U29tZSA9IHJlcXVpcmUoJy4vX2FycmF5U29tZScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiJdfQ==